Server Monitoring Web Api
=========================

This is a web api for getting important server performance/usage metrics 
(e.g. hard disk/cpu/memory usage and whether process is up or down.

Installation
------------
Preferably, the package should be installed in virtual environments so that 
packages can be installed without dependency or permission issues.  
For information about virtual environments, please visit 
<https://docs.python.org/3/library/venv.html>.

To install the package, simply clone or download the repository,
in the project folder, run::

    pip install -e .

After installing the package, you can launch a testing server by running::

    python manage.py runserver

manage.py (using Flask-Scripts <https://github.com/smurflix/flask-script>) 
provides a handful of commands, which will be described in the sections below.

List of manage.py Commands
--------------------------
manage.py is the primary tool for managing the whole project.  To use it, run::

    python manage.py [command]    

It currently supports for following commands

* ``runserver`` \- starts a development server at localhost

* ``test`` \- run all unit test cases in tests folder

* ``makedoc`` \- generate documentations from ``docs`` folder

Project Structure
-----------------
* ``servmon`` \- the top-level package of the project, 
  all functionalities are accessed here

  * ``servmon/common`` \- package containing all common utilities used by APIs,
    e.g. exception classes

    * ``servmon/common/errorhandler`` \- package containing all error handlers 
      handling exceptions raised by APIs

  * ``servmon/api`` \- package containing the actual APIs

* ``tests`` \- folder containing unit tests for servmon
  
  * ``tests/test_common`` \- folder containing unit tests 
    for common utilities in ``servmon/common``

    * ``tests/test_common/test_errorhandler`` \- folder containing unit tests 
      for ``servmon/common/errorhandler``

  * ``tests/test_api`` \- folder containing unit tests for APIs in ``servmon/api``

* ``docs`` \- folder containing the documentation files, majority of those 
  (except for the API index and content page) will be generated automatically

  * ``docs/_build/`` \- folder containing the outputs of documentation files, 
    **PLEASE DO NOT DIRECTLY MODIFY FILES IN THIS FOLDER**, run::

        python manage.py makedoc

    instead

Unit Testing
------------
The project uses pytest <http://doc.pytest.org/en/latest/index.html> for unit testing.  Please see examples from ``tests/test_common`` and ``tests/test_api``

Writing Documentation
---------------------
The project uses Sphinx <http://www.sphinx-doc.org/en/1.5.1> for documentation.
The majority of the documentation is generated by its autodoc extension.  
To write documentation for source codes, please refer to 
``servmon/api/hello.py`` and ``servmon/common/today.py`` for examples.  
For further information, please visit 
<https://pythonhosted.org/an_example_pypi_project/sphinx.html> and 
<https://pythonhosted.org/sphinxcontrib-httpdomain/>.
